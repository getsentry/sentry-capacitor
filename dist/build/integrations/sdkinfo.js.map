{"version":3,"file":"sdkinfo.js","sourceRoot":"","sources":["../../../src/integrations/sdkinfo.ts"],"names":[],"mappings":";;;AACA,uCAAuC;AAEvC,sCAAmD;AACnD,sCAAoC;AAEpC,sCAAsC;AACtC;IAAA;QAME;;WAEG;QACI,SAAI,GAAW,OAAO,CAAC,EAAE,CAAC;QAEzB,sBAAiB,GAAmB,IAAI,CAAC;IAqCnD,CAAC;IAnCC;;OAEG;IACI,2BAAS,GAAhB,UAAiB,uBAAoD;QAArE,iBA+BC;QA9BC,uBAAuB,CAAC,UAAM,KAAK;;;;;6BAG7B,CAAA,gBAAM,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,CAAA,EAA5D,wBAA4D;;;;wBAE5D,KAAA,IAAI,CAAA;wBAAqB,qBAAM,gBAAM,CAAC,kBAAkB,EAAE,EAAA;;wBAA1D,GAAK,iBAAiB,GAAG,SAAiC,CAAC;;;;wBAE3D,qGAAqG;wBACrG,cAAM,CAAC,IAAI,CACT,sGAAsG,CACvG,CAAC;;;wBAIN,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,YAAY,CAAC;wBAChD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,IAAI,EAAE,CAAC;wBAC5B,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,kBAAQ,CAAC;wBAC5C,KAAK,CAAC,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,IAAI,qBAAW,CAAC;wBACrD,KAAK,CAAC,GAAG,CAAC,QAAQ,oBAEb,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC,EAC1B,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,EAAE,CAAC;4BAC/D;gCACE,IAAI,EAAE,uBAAuB;gCAC7B,OAAO,EAAE,qBAAW;6BACrB;0BACF,CAAC;wBAEF,sBAAO,KAAK,EAAC;;;aACd,CAAC,CAAC;IACL,CAAC;IA9CD;;OAEG;IACW,UAAE,GAAW,SAAS,CAAC;IA4CvC,cAAC;CAAA,AAhDD,IAgDC;AAhDY,0BAAO","sourcesContent":["import type { EventProcessor, Integration, Package } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { SDK_NAME, SDK_VERSION } from '../version';\nimport { NATIVE } from '../wrapper';\n\n/** Default SdkInfo instrumentation */\nexport class SdkInfo implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'SdkInfo';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = SdkInfo.id;\n\n  private _nativeSdkPackage: Package | null = null;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (e: EventProcessor) => void): void {\n    addGlobalEventProcessor(async event => {\n      // The native SDK info package here is only used on iOS as `beforeSend` is not called on `captureEnvelope`.\n      // this._nativeSdkInfo should be defined a following time so this call won't always be awaited.\n      if (NATIVE.platform === 'ios' && this._nativeSdkPackage === null) {\n        try {\n          this._nativeSdkPackage = await NATIVE.fetchNativeSdkInfo();\n        } catch (_) {\n          // If this fails, go ahead as usual as we would rather have the event be sent with a package missing.\n          logger.warn(\n            '[SdkInfo] Native SDK Info retrieval failed...something could be wrong with your Sentry installation.',\n          );\n        }\n      }\n\n      event.platform = event.platform || 'javascript';\n      event.sdk = event.sdk || {};\n      event.sdk.name = event.sdk.name || SDK_NAME;\n      event.sdk.version = event.sdk.version || SDK_VERSION;\n      event.sdk.packages = [\n        // default packages are added by baseclient and should not be added here\n        ...(event.sdk.packages || []),\n        ...((this._nativeSdkPackage && [this._nativeSdkPackage]) || []),\n        {\n          name: 'npm:@sentry/capacitor',\n          version: SDK_VERSION,\n        },\n      ];\n\n      return event;\n    });\n  }\n}\n"]}