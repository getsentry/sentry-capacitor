{"version":3,"file":"devicecontext.js","sourceRoot":"","sources":["../../../src/integrations/devicecontext.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,uBAAuB,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAEtE,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AAEpC,uCAAuC;AACvC,MAAM,OAAO,aAAa;IAA1B;QAME;;WAEG;QACI,SAAI,GAAW,aAAa,CAAC,EAAE,CAAC;IA8BzC,CAAC;IA5BC;;OAEG;IACI,SAAS;QACd,uBAAuB,CAAC,CAAO,KAAY,EAAE,EAAE;YAC7C,MAAM,IAAI,GAAG,aAAa,EAAE,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;YAC3D,IAAI,CAAC,IAAI,EAAE;gBACT,OAAO,KAAK,CAAC;aACd;YAED,IAAI;gBACF,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,yBAAyB,EAAE,CAAC;gBAC1D,MAAM,OAAO,GAAI,QAAQ,CAAC,SAAS,CAAc,CAAC;gBAElD,KAAK,CAAC,QAAQ,mCAAQ,OAAO,GAAK,KAAK,CAAC,QAAQ,CAAE,CAAC;gBACnD,IAAI,MAAM,IAAI,QAAQ,EAAE;oBACtB,MAAM,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAC9B,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;wBACf,KAAK,CAAC,IAAI,qBAAQ,IAAI,CAAE,CAAC;qBAC1B;iBACF;aACF;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,CAAC,GAAG,CAAC,6CAA6C,CAAC,EAAE,CAAC,CAAC;aAC9D;YAED,OAAO,KAAK,CAAC;QACf,CAAC,CAAA,CAAC,CAAC;IACL,CAAC;;AArCD;;GAEG;AACW,gBAAE,GAAW,eAAe,CAAC","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport type { Contexts, Event, Integration } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { NATIVE } from '../wrapper';\n\n/** Load device context from native. */\nexport class DeviceContext implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'DeviceContext';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = DeviceContext.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (event: Event) => {\n      const self = getCurrentHub().getIntegration(DeviceContext);\n      if (!self) {\n        return event;\n      }\n\n      try {\n        const contexts = await NATIVE.fetchNativeDeviceContexts();\n        const context = (contexts['context'] as Contexts);\n\n        event.contexts = { ...context, ...event.contexts };\n        if ('user' in contexts) {\n          const user = contexts['user'];\n          if (!event.user) {\n            event.user = { ...user };\n          }\n        }\n      } catch (e) {\n        logger.log(`Failed to get device context from native: ${e}`);\n      }\n\n      return event;\n    });\n  }\n}\n"]}