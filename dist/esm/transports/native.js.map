{"version":3,"file":"native.js","sourceRoot":"","sources":["../../../src/transports/native.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAElD,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AAEpC,MAAM,CAAC,MAAM,mBAAmB,GAAG,EAAE,CAAC;AAQtC,4CAA4C;AAC5C,MAAM,OAAO,eAAe;IAI1B,YAAmB,UAAsC,EAAE;QACzD,IAAI,CAAC,OAAO,GAAG,iBAAiB,CAAC,OAAO,CAAC,UAAU,IAAI,mBAAmB,CAAC,CAAC;IAC9E,CAAC;IAGD;;;;OAIG;IACI,IAAI,CAAC,QAAkB;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED;;;;;;;OAOG;IACI,KAAK,CAAC,OAAgB;QAC3B,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;CACF;AAED;;GAEG;AACH,MAAM,UAAU,mBAAmB,CAAC,UAAsC,EAAE;IAC1E,OAAO,IAAI,eAAe,CAAC,OAAO,CAAC,CAAC;AACtC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,0BAA0B,CAAC,EACzC,YAAY,GAGb;IACC,IAAI,YAAY,IAAI,MAAM,CAAC,uBAAuB,EAAE,EAAE;QACpD,OAAO,mBAAmB,CAAC;KAC5B;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import type { BaseTransportOptions, Envelope, Transport, TransportMakeRequestResponse } from '@sentry/types';\nimport type { PromiseBuffer } from '@sentry/utils';\nimport { makePromiseBuffer } from '@sentry/utils';\n\nimport { NATIVE } from '../wrapper';\n\nexport const DEFAULT_BUFFER_SIZE = 30;\n\nexport type BaseNativeTransport = BaseTransportOptions;\n\nexport interface BaseNativeTransportOptions {\n  bufferSize?: number;\n}\n\n/** Native Transport class implementation */\nexport class NativeTransport implements Transport {\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<void | TransportMakeRequestResponse>;\n\n  public constructor(options: BaseNativeTransportOptions = {}) {\n    this._buffer = makePromiseBuffer(options.bufferSize || DEFAULT_BUFFER_SIZE);\n  }\n\n\n  /**\n   * Sends the envelope to the Store endpoint in Sentry.\n   *\n   * @param envelope Envelope that should be sent to Sentry.\n   */\n  public send(envelope: Envelope): PromiseLike<void | TransportMakeRequestResponse> {\n    return this._buffer.add(() => NATIVE.sendEnvelope(envelope));\n  }\n\n  /**\n   * Wait for all envelopes to be sent or the timeout to expire, whichever comes first.\n   *\n   * @param timeout Maximum time in ms the transport should wait for envelopes to be flushed. Omitting this parameter will\n   *   cause the transport to wait until all events are sent before resolving the promise.\n   * @returns A promise that will resolve with `true` if all events are sent before the timeout, or `false` if there are\n   * still events in the queue when the timeout is reached.\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n}\n\n/**\n * Creates a Native Transport.\n */\nexport function makeNativeTransport(options: BaseNativeTransportOptions = {}): NativeTransport {\n  return new NativeTransport(options);\n}\n\n/**\n * Creates a Native Transport factory if the native transport is available.\n */\nexport function makeNativeTransportFactory({\n  enableNative,\n}: {\n  enableNative?: boolean;\n}): typeof makeNativeTransport | null {\n  if (enableNative && NATIVE.isNativeClientAvailable()) {\n    return makeNativeTransport;\n  }\n  return null;\n}\n"]}