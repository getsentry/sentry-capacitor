{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../../src/sdk.ts"],"names":[],"mappings":"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","sourcesContent":["import type { StackFrame } from '@sentry/browser';\nimport {\n  defaultIntegrations,\n  init as browserInit\n} from '@sentry/browser';\nimport { Hub, makeMain } from '@sentry/core';\nimport { RewriteFrames } from '@sentry/integrations';\n\nimport { DeviceContext, EventOrigin, SdkInfo } from './integrations';\nimport type { CapacitorOptions } from './options';\nimport { CapacitorScope } from './scope';\nimport { DEFAULT_BUFFER_SIZE, makeNativeTransport } from './transports/native';\nimport { makeUtf8TextEncoder } from './transports/TextEncoder';\nimport { NATIVE } from './wrapper';\n\n/**\n * Initializes the Capacitor SDK alongside a sibling Sentry SDK\n * @param options Options for the SDK\n * @param originalInit The init function of the sibling SDK, leave blank to initialize with `@sentry/browser`\n */\nexport function init<O>(\n  passedOptions: CapacitorOptions & O,\n  originalInit: (passedOptions: O) => void = browserInit,\n): void {\n  const finalOptions = {\n    enableAutoSessionTracking: true,\n    enableOutOfMemoryTracking: true,\n    ...passedOptions,\n  };\n  if (finalOptions.enabled === false ||\n    NATIVE.platform === 'web') {\n    finalOptions.enableNative = false;\n    finalOptions.enableNativeNagger = false;\n  } else {\n    // keep the original value if user defined it.\n    finalOptions.enableNativeNagger ??= true;\n    finalOptions.enableNative ??= true;\n  }\n\n  const capacitorHub = new Hub(undefined, new CapacitorScope());\n  makeMain(capacitorHub);\n\n  finalOptions.defaultIntegrations = [\n    ...defaultIntegrations,\n    new RewriteFrames({\n      iteratee: (frame: StackFrame) => {\n        if (frame.filename) {\n          const isReachableHost = /^https?:\\/\\//.test(frame.filename);\n\n          frame.filename = frame.filename\n            .replace(/^https?:\\/\\/localhost(:\\d+)?/, '')\n            .replace(/^ng:\\/\\//, '')\n            .replace(/^capacitor:\\/\\/localhost(:\\d+)?/, '');\n\n          const isNativeFrame = frame.filename === '[native code]' || frame.filename === 'native';\n\n          if (!isNativeFrame) {\n            // We don't need to use `app://` protocol for http(s) based hosts\n            if (!isReachableHost) {\n              // We always want to have a triple slash\n              const filename = frame.filename.startsWith('/') ? frame.filename : `/${frame.filename}`;\n              const appPrefix = 'app://';\n              frame.filename = `${appPrefix}${filename}`;\n            }\n\n            frame.in_app = true;\n          } else {\n            frame.in_app = false;\n          }\n        }\n        return frame;\n      },\n    }),\n    new SdkInfo(),\n    new EventOrigin(),\n  ];\n\n  if (finalOptions.enableNative) {\n    finalOptions.defaultIntegrations.push(new DeviceContext());\n\n    if (!passedOptions.transport && NATIVE.platform !== 'web') {\n      finalOptions.transport = passedOptions.transport\n        || makeNativeTransport;\n\n      finalOptions.transportOptions = {\n        ...{ textEncoder: makeUtf8TextEncoder() },\n        ...(passedOptions.transportOptions ?? {}),\n        bufferSize: DEFAULT_BUFFER_SIZE,\n      };\n    }\n  }\n\n  const browserOptions = {\n    ...finalOptions,\n    autoSessionTracking:\n      NATIVE.platform === 'web' && finalOptions.enableAutoSessionTracking,\n  } as O;\n\n  const mobileOptions = {\n    ...finalOptions,\n    enableAutoSessionTracking:\n      NATIVE.platform !== 'web' && finalOptions.enableAutoSessionTracking,\n  } as CapacitorOptions;\n\n  // We first initialize the NATIVE SDK to avoid the Javascript SDK to invoke any\n  // feature from the NATIVE SDK without the options being set.\n  void NATIVE.initNativeSdk(mobileOptions);\n  originalInit(browserOptions);\n}\n\n/**\n * If native client is available it will trigger a native crash\n * Use this only for testing purposes\n */\nexport function nativeCrash(): void {\n  NATIVE.crash();\n}\n"]}