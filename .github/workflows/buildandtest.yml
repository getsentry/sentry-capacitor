name: 'Build & Test'
on:
  push:
    branches:
      - main
      - release/**
  pull_request:

env:
  CACHED_DEPENDENCY_PATHS: |
    ${{ github.workspace }}/node_modules

  CACHED_BUILD_PATHS: |
    ${{ github.workspace }}/dist

  BUILD_CACHE_KEY: ${{ github.sha }}

jobs:
  job_install_deps:
    name: Install Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v4
      - run: corepack enable
      - name: Set up Node
        uses: actions/setup-node@v5
        # we use a hash of yarn.lock as our cache key, because if it hasn't changed, our dependencies haven't changed,
        # so no need to reinstall them
      - name: Compute dependency cache key
        id: compute_lockfile_hash
        run: echo "hash=${{ hashFiles('yarn.lock') }}" >> "$GITHUB_OUTPUT"
      - name: Check dependency cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # V4.2.4
        id: cache_dependencies
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ steps.compute_lockfile_hash.outputs.hash }}

      - name: Install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: yarn install
    outputs:
      dependency_cache_key: ${{ steps.compute_lockfile_hash.outputs.hash }}

  job_build:
    name: Build
    needs: job_install_deps
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v4
      - run: corepack enable
      - name: Set up Node
        uses: actions/setup-node@v5
      - name: Check dependency cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # V4.2.4
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_install_deps.outputs.dependency_cache_key }}
      - name: Check build cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # V4.2.4
        id: cache_built_packages
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}
      - name: Build packages
        # Under normal circumstances, using the git SHA as a cache key, there shouldn't ever be a cache hit on the built
        # packages, and so `yarn build` should always run. This `if` check is therefore only there for testing CI issues
        # where the built packages are beside the point. In that case, you can change `BUILD_CACHE_KEY` (at the top of
        # this file) to a constant and skip rebuilding all of the packages each time CI runs.
        if: steps.cache_built_packages.outputs.cache-hit != 'true'
        run: yarn build
        # yarn.lock cannot be dirty when releasing a new version.
      - name: Check if yarn.lock is dirty
        if: steps.cache_built_packages.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      - name: Publish package locally
        run: |
          yarn global add yalc
          yalc publish

      - name: Upload yalc package
        uses: actions/upload-artifact@v4
        with:
          name: yalc-package
          if-no-files-found: error
          path: ~/.yalc/packages/@sentry/capacitor/ # Path to yalc directory where the package is published

    outputs:
      # this needs to be passed on, because the `needs` context only looks at direct ancestors (so steps which depend on
      # `job_build` can't see `job_install_deps` and what it returned)
      dependency_cache_key: ${{ needs.job_install_deps.outputs.dependency_cache_key }}

  job_sample_test:
    name: Sample Build Test
    needs: job_build
    # macos required for the xcode build.
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - bump: 'v6'
          - bump: 'v7'
          - bump: 'sample-vue'
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v4
      - run: corepack enable
      - name: Set up Node
        uses: actions/setup-node@v5
      - name: Check dependency cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # V4.2.4
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_build.outputs.dependency_cache_key }}
      - name: Check build cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # V4.2.4
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}
      - name: Install yalc
        run: yarn  global add yalc
      - name: Install Ionic
        run: yarn  global add @ionic/cli

      - name: Download Sentry Capacitor package
        uses: actions/download-artifact@v4
        with:
          name: yalc-package
          path: ~/.yalc/packages/@sentry/capacitor/ # Ensure this path matches where yalc expects to find the package

      - name: Publish test broken node.
        working-directory: example/broken_node_module
        run: |
          yarn install
          yarn build
          yalc publish

      - name: Build Sample ${{ matrix.bump }}
        run: yarn run bump:${{ matrix.bump }}

      - name: Resolve sample directory
        id: resolve_sample
        run: |
          if [ "${{ matrix.bump }}" = "v6" ]; then echo "SAMPLE_DIR=ionic-angular-v6" >> "$GITHUB_ENV"; fi
          if [ "${{ matrix.bump }}" = "v7" ]; then echo "SAMPLE_DIR=ionic-angular-v7" >> "$GITHUB_ENV"; fi
          if [ "${{ matrix.bump }}" = "sample-vue" ]; then echo "SAMPLE_DIR=ionic-vue3" >> "$GITHUB_ENV"; fi

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Make gradlew executable
        working-directory: example/${{ env.SAMPLE_DIR }}/android
        run: chmod +x ./gradlew

      - name: Clean Gradle cache
        run: rm -rf ~/.gradle/caches

      - name: Android build (Gradle)
        working-directory: example/${{ env.SAMPLE_DIR }}/android
        env:
          GRADLE_OPTS: -Dorg.gradle.daemon=false
        run: ./gradlew --no-daemon assembleDebug

      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SAMPLE_DIR }}-android-apk
          if-no-files-found: warn
          path: |
            example/${{ env.SAMPLE_DIR }}/android/app/build/outputs/apk/debug/*.apk

      - name: Install CocoaPods
        run: sudo gem install cocoapods --no-document

      - name: Install xcpretty
        run: sudo gem install xcpretty --no-document

      - name: iOS pod install
        working-directory: example/${{ env.SAMPLE_DIR }}/ios/App
        run: pod install --repo-update

      - name: iOS build (xcodebuild)
        working-directory: example/${{ env.SAMPLE_DIR }}/ios/App
        run: |
          xcodebuild -workspace App.xcworkspace \
                     -scheme App \
                     -configuration Debug \
                     -sdk iphonesimulator \
                     -destination 'platform=iOS Simulator,name=iPhone 15' \
                     build | xcpretty

      - name: Upload iOS build logs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SAMPLE_DIR }}-ios-build-logs
          if-no-files-found: warn
          path: |
            ~/Library/Logs/Diagnostics/*

  job_unit_test:
    name: Test
    needs: job_build
    continue-on-error: true
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v4
      - run: corepack enable
      - name: Set up Node
        uses: actions/setup-node@v5
      - name: Check dependency cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # V4.2.4
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_build.outputs.dependency_cache_key }}
      - name: Check build cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # V4.2.4
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}
      - name: Run tests
        run: yarn test

  job_artifacts:
    name: Upload Artifacts
    needs: job_build
    runs-on: ubuntu-latest
    steps:
      - name: Check out current commit (${{ github.sha }})
        uses: actions/checkout@v4
      - run: corepack enable
      - name: Set up Node
        uses: actions/setup-node@v5
      - name: Check dependency cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # V4.2.4
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_build.outputs.dependency_cache_key }}
      - name: Check build cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # V4.2.4
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}
      - name: Pack
        run: yarn pack
      - name: Archive artifacts
        uses: actions/upload-artifact@v4.1.0
        with:
          name: ${{ github.sha }}
          path: |
            ${{ github.workspace }}/sentry-capacitor-*
